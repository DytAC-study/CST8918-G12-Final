name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'weather-app/**'
      - '.github/workflows/complete-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'weather-app/**'
      - '.github/workflows/complete-pipeline.yml'

permissions:
  id-token: write
  contents: read

jobs:
  # Step 1: Static Analysis & Security Scan
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.44.1

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: modules

      - name: Terraform Init - Network Module
        run: terraform init
        working-directory: modules/network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: modules/network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: TFLint
        run: |
          tflint --init
          tflint --recursive
        working-directory: modules

      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: modules

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  # Step 2: Build Application
  build-app:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local only)
        uses: docker/build-push-action@v5
        with:
          context: ./weather-app
          platforms: linux/amd64
          push: false
          tags: weather-app:latest

  # Step 3: Infrastructure Planning & Application (Import Existing Resources)
  terraform-plan-and-apply:
    runs-on: ubuntu-latest
    needs: [static-analysis, build-app]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Dev Environment (Import Existing Resources)
      - name: Deploy Dev Environment
        run: |
          echo "=== Deploying Dev Environment ==="
          cd environments/dev
          
          # Temporarily comment out the entire backend block
          sed -i '/^  backend "azurerm" {/,/^  }/s/^/  # /' main.tf
          
          # Use local state to avoid Azure Storage issues
          terraform init -backend=false
          
          # Import existing resource group if it exists
          terraform import module.network.azurerm_resource_group.network /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/cst8918-final-project-group-1 || echo "Resource group already imported or doesn't exist"
          
          terraform plan -out=tfplan -lock=false
          terraform apply -auto-approve -lock=false
          echo "Dev environment deployed successfully!"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      # Test Environment (Import Existing Resources)
      - name: Deploy Test Environment
        run: |
          echo "=== Deploying Test Environment ==="
          cd environments/test
          
          # Temporarily comment out the entire backend block
          sed -i '/^  backend "azurerm" {/,/^  }/s/^/  # /' main.tf
          
          # Use local state to avoid Azure Storage issues
          terraform init -backend=false
          
          # Import existing resource group if it exists
          terraform import module.network.azurerm_resource_group.network /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/cst8918-final-project-group-1 || echo "Resource group already imported or doesn't exist"
          
          terraform plan -out=tfplan -lock=false
          terraform apply -auto-approve -lock=false
          echo "Test environment deployed successfully!"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      # Prod Environment (Import Existing Resources)
      - name: Deploy Prod Environment
        run: |
          echo "=== Deploying Prod Environment ==="
          cd environments/prod
          
          # Temporarily comment out the entire backend block
          sed -i '/^  backend "azurerm" {/,/^  }/s/^/  # /' main.tf
          
          # Use local state to avoid Azure Storage issues
          terraform init -backend=false
          
          # Import existing resource group if it exists
          terraform import module.network.azurerm_resource_group.network /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/cst8918-final-project-group-1 || echo "Resource group already imported or doesn't exist"
          
          terraform plan -out=tfplan -lock=false
          terraform apply -auto-approve -lock=false
          echo "Prod environment deployed successfully!"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # Step 4: Application Deployment (Optimized)
  deploy-applications:
    runs-on: ubuntu-latest
    needs: terraform-plan-and-apply
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Test Environment
      - name: Deploy to Test Environment
        run: |
          echo "=== Deploying to Test Environment ==="
          az aks get-credentials --resource-group cst8918-final-project-group-1 --name test-aks --overwrite-existing
          kubectl apply -f environments/test/weather-service.yaml
          kubectl rollout status deployment/weather-app -n default --timeout=180s
          echo "Test deployment completed successfully!"

      # Deploy to Production Environment
      - name: Deploy to Production Environment
        run: |
          echo "=== Deploying to Production Environment ==="
          az aks get-credentials --resource-group cst8918-final-project-group-1 --name prod-aks --overwrite-existing
          kubectl apply -f environments/prod/weather-service.yaml
          kubectl rollout status deployment/weather-app -n default --timeout=180s
          echo "Production deployment completed successfully!"

      # Final Status Check (Optimized)
      - name: Check Deployment Status
        run: |
          echo "=== Final Deployment Status ==="
          echo "Test Environment Services:"
          kubectl get services -n default --no-headers | grep weather-app
          echo "Production Environment Services:"
          kubectl get services -n default --no-headers | grep weather-app
          echo "All deployments completed successfully!" 