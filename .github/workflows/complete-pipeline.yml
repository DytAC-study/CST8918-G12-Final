name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'weather-app/**'
      - '.github/workflows/complete-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'environments/**'
      - 'weather-app/**'
      - '.github/workflows/complete-pipeline.yml'

permissions:
  id-token: write
  contents: read

# üöÄ Á°Æ‰øùÂêå‰∏ÄÂàÜÊîØÂè™Êúâ‰∏Ä‰∏™ workflow Âú®Ë∑ëÔºåÈÅøÂÖç state lock Âç°Ê≠ª
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Static Analysis and Security Scanning
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.44.1

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: |
          for dir in environments/*/; do
            if [ -f "$dir/main.tf" ]; then
              echo "Validating $dir"
              cd "$dir"
              terraform init -backend=false
              terraform validate
              cd ../..
            fi
          done

      - name: TFLint
        run: |
          tflint --init
          tflint --recursive

      - name: Security Scan with tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: .
          format: sarif
        continue-on-error: true

  # Job 2: Build and Push Docker Image
  build-app:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        run: az acr login --name cst8918acr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./weather-app
          push: true
          platforms: linux/amd64
          tags: |
            cst8918acr.azurecr.io/weather-app:${{ github.sha }}
            cst8918acr.azurecr.io/weather-app:latest

  # Job 3: Terraform Plan (runs on PR + main push)
  terraform-plan:
    runs-on: ubuntu-latest
    needs: [static-analysis, build-app]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: [test]  # ÂèØ‰ª•Âä† prod
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init & Plan - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform init
          terraform plan -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/tfplan

  # Job 4: Terraform Apply (only on main)
  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: [test]
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}

      - name: Terraform Apply - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform apply -auto-approve tfplan || \
          (echo "‚ö†Ô∏è Terraform failed, attempting force-unlock..." && terraform force-unlock -force $(terraform show -json tfplan | jq -r '.terraform_version') && exit 1)
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # Job 5: Deploy Application to Kubernetes
  deploy-app:
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: [test]
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to ${{ matrix.environment }}
        run: |
          if [ "${{ matrix.environment }}" = "test" ]; then
            az aks get-credentials --resource-group cst8918-final-project-group-1 --name test-aks --overwrite-existing
          fi
          kubectl apply -f environments/${{ matrix.environment }}/weather-service.yaml
          kubectl rollout status deployment/weather-app -n default --timeout=180s

      - name: Verify Deployment
        run: |
          kubectl get services -n default
          kubectl get pods -n default
          kubectl get deployments -n default

  # Job 6: Drift Detection
  drift-check:
    runs-on: ubuntu-latest
    needs: deploy-app
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: [test]
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Drift - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform init
          terraform plan -detailed-exitcode
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        continue-on-error: true

  # Job 7: Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-app
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: [test]
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          if [ "${{ matrix.environment }}" = "test" ]; then
            az aks get-credentials --resource-group cst8918-final-project-group-1 --name test-aks --overwrite-existing
          fi

      - name: Wait for LoadBalancer
        run: |
          kubectl wait --for=condition=Ready service/weather-app-service -n default --timeout=300s
          EXTERNAL_IP=$(kubectl get service weather-app-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNAL_IP"
          timeout 300 bash -c 'until curl -f http://$EXTERNAL_IP/health; do sleep 10; done'

      - name: Test Endpoints
        run: |
          EXTERNAL_IP=$(kubectl get service weather-app-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$EXTERNAL_IP/health
          curl -f http://$EXTERNAL_IP/
